from asgiref.sync import async_to_sync
from channels.generic.websocket import WebsocketConsumer
import json
from .models import Message,User
class ChatConsumer(WebsocketConsumer):

    def __init__(self, *args, **kwargs):
        super().__init__(args, kwargs)
        self.room_name = None
        self.room_group_name = None
        self.room = None

    def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room']
        self.room_group_name = f'chat_{self.room_name}'
        u_list = list(map(int, self.room_name.split('_') ) ) 
		
        self.user = self.scope['user'].id
		
        if self.user not in u_list: 
            print(f'Un-Authorized')
            return
        # connection has to be accepted
        self.accept()
		
		# Fetch the data 
		latest_messages = Message.objects.order_by('-timestamp').filter('user1'=u_list[0],'user2'=u_list[1]).values_list(
			'message','timestamp')

        # join the room group
        async_to_sync(self.channel_layer.group_add)(
            self.room_group_name,
            self.channel_name,
        )
		return {msgs:latest_messages}

    def disconnect(self, close_code):
        return 
	
    def receive(self, text_data=None, bytes_data=None):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']

        # send chat message event to the room
        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message,
            }
        )

    def chat_message(self, event):
        self.send(text_data=json.dumps(event))